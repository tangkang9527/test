<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--xml映射文件 必须与接口一对一绑定
    namespace: 指定需要绑定的接口名称. 不能重复.
 -->
<mapper namespace="com.jt.mapper.DemoUserMapper">

    <!--映射原理:
        如果配置文件中定义了包路径,则映射对象时会自动的完成路径的拼接
        resultType="com.jt.pojo.DemoUser"
    -->

    <!--2.简化Sql标签 -->
    <sql id="demo_user_sql">
        select id,name,age,sex from demo_user
    </sql>

    <!--include 代表包含Sql标签  refid="引用Sql标签ID"-->
    <select id="findAll" resultType="DemoUser">
        <include refid="demo_user_sql"/>
    </select>

    <!--动态Sql案例
        思路: 如果数据不为null,mybatis才会当做条件
        if标签说明:
            test: 判断的条件 直接写属性即可
        where标签: 去除条件中多余的 and 或者 or的
        说明: if和 where 几乎一起出现.
    -->
    <select id="findWhere" resultType="DemoUser">
        select id,name,age,sex from demo_user
            <where>
                <if test="name != null">name = #{name}</if>
                <if test="age !=null"> and age=#{age}</if>
                <if test="sex !=null"> and sex=#{sex}</if>
            </where>
    </select>

    <!--
        规则: 根据对象中不为null的属性当做set条件
        set标签说明: 去除set条件中多余的 ,号
    -->
    <update id="updateUser">
        update demo_user
            <set>
                <if test="name !=null">name = #{name},</if>
                <if test="age !=null">age = #{age},</if>
                <if test="sex !=null">sex = #{sex}</if>
            </set>
            where
                id = #{id}
    </update>

</mapper>